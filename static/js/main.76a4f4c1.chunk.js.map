{"version":3,"sources":["input.js","App.js","serviceWorker.js","index.js"],"names":["Input","className","this","props","equation","join","result","Component","App","state","cal","valueToCalculate","event","push","target","id","console","log","forceUpdate","Calculate","eval","setState","clearInput","delInput","pop","colSpan","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAEaA,EAAb,iLAEI,OACE,yBAAKC,UAAU,mCACZC,KAAKC,MAAMC,SAASC,KAAK,IAD5B,IACiC,6BAC9BH,KAAKC,MAAMG,YALpB,GAA2BC,aAWZP,O,ysCCRFQ,IAAb,6rBACEC,MAAQ,CACNC,IAAK,GACLJ,OAAQ,IAHZ,MAMEK,iBAAmB,SAAAC,GACjB,MAAKH,MAAMC,IAAIG,KAAKD,EAAME,OAAOC,IACjCC,QAAQC,IAAI,MAAKR,OACjB,MAAKS,eATT,MAYEC,UAAY,WAEV,IAAMb,OAASc,KAAK,MAAKX,MAAMC,IAAIL,KAAK,KACxC,MAAKgB,SAAS,CAAEf,OAAQA,UAf5B,MAiBEgB,WAAa,WACX,MAAKD,SAAS,CAAEX,IAAK,KACrB,MAAKW,SAAS,CAAEf,OAAQ,MAnB5B,MAqBEiB,SAAW,WACT,MAAKd,MAAMC,IAAIc,MACf,MAAKN,eAvBT,8UA2BI,OACE,sEACE,kEAAKjB,UAAU,gDACb,oEAAOA,UAAU,mCACf,wEACE,qEACE,iEAAIwB,QAAQ,KACV,2DAAC,sCAAD,CAAOrB,SAAUF,KAAKO,MAAMC,IAAKJ,OAAQJ,KAAKO,MAAMH,WAGxD,qEACE,iEAAImB,QAAQ,IAAIxB,UAAU,UAAUyB,QAASxB,KAAKoB,YAAlD,SAGA,iEAAII,QAASxB,KAAKqB,UAAlB,QAEF,qEACE,iEAAIR,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEACEI,GAAG,IACHd,UAAU,YACVyB,QAASxB,KAAKS,kBAHhB,MAQF,qEACE,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEACEI,GAAG,IACHd,UAAU,YACVyB,QAASxB,KAAKS,kBAHhB,MAQF,qEACE,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEACEI,GAAG,IACHd,UAAU,YACVyB,QAASxB,KAAKS,kBAHhB,MAQF,qEACE,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEAAII,GAAG,IAAIW,QAASxB,KAAKS,kBAAzB,KAGA,iEAAIV,UAAU,aAAayB,QAASxB,KAAKiB,WAAzC,KAGA,iEACEJ,GAAG,IACHd,UAAU,YACVyB,QAASxB,KAAKS,kBAHhB,cA3GhB,KAAyBJ,8CA2HVC,2B,gKCpHKmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACzB,EAAA,EAAD,MAAS0B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.76a4f4c1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class Input extends Component {\n  render() {\n    return (\n      <div className=\"bg-dark text-white shadow input\">\n        {this.props.equation.join(\"\")} <br />\n        {this.props.result}\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./input\";\nimport Input from \"./input\";\n\nexport class App extends Component {\n  state = {\n    cal: [],\n    result: \"\"\n  };\n\n  valueToCalculate = event => {\n    this.state.cal.push(event.target.id);\n    console.log(this.state);\n    this.forceUpdate();\n  };\n\n  Calculate = () => {\n    // eslint-disable-next-line\n    const result = eval(this.state.cal.join(\"\"));\n    this.setState({ result: result });\n  };\n  clearInput = () => {\n    this.setState({ cal: [] });\n    this.setState({ result: \"\" });\n  };\n  delInput = () => {\n    this.state.cal.pop();\n    this.forceUpdate();\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container mt-3 d-flex justify-content-center\">\n          <table className=\"table text-center border shadow\">\n            <tbody>\n              <tr>\n                <td colSpan=\"4\">\n                  <Input equation={this.state.cal} result={this.state.result} />\n                </td>\n              </tr>\n              <tr>\n                <td colSpan=\"3\" className=\"bg-info\" onClick={this.clearInput}>\n                  Clear\n                </td>\n                <td onClick={this.delInput}>DEL</td>\n              </tr>\n              <tr>\n                <td id=\"1\" onClick={this.valueToCalculate}>\n                  1\n                </td>\n                <td id=\"2\" onClick={this.valueToCalculate}>\n                  2\n                </td>\n                <td id=\"3\" onClick={this.valueToCalculate}>\n                  3\n                </td>\n                <th\n                  id=\"+\"\n                  className=\"bg-danger\"\n                  onClick={this.valueToCalculate}\n                >\n                  +\n                </th>\n              </tr>\n              <tr>\n                <td id=\"4\" onClick={this.valueToCalculate}>\n                  4\n                </td>\n                <td id=\"5\" onClick={this.valueToCalculate}>\n                  5\n                </td>\n                <td id=\"6\" onClick={this.valueToCalculate}>\n                  6\n                </td>\n                <th\n                  id=\"-\"\n                  className=\"bg-danger\"\n                  onClick={this.valueToCalculate}\n                >\n                  -\n                </th>\n              </tr>\n              <tr>\n                <td id=\"7\" onClick={this.valueToCalculate}>\n                  7\n                </td>\n                <td id=\"8\" onClick={this.valueToCalculate}>\n                  8\n                </td>\n                <td id=\"9\" onClick={this.valueToCalculate}>\n                  9\n                </td>\n                <th\n                  id=\"/\"\n                  className=\"bg-danger\"\n                  onClick={this.valueToCalculate}\n                >\n                  /\n                </th>\n              </tr>\n              <tr>\n                <td id=\"0\" onClick={this.valueToCalculate}>\n                  0\n                </td>\n                <td id=\".\" onClick={this.valueToCalculate}>\n                  .\n                </td>\n                <td className=\"bg-success\" onClick={this.Calculate}>\n                  =\n                </td>\n                <th\n                  id=\"*\"\n                  className=\"bg-danger\"\n                  onClick={this.valueToCalculate}\n                >\n                  x\n                </th>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}